1011_00010  // put 1 0 # $r0 = 1 
1000_00000  // lb $r0 0 # $r0 = M[1] 
1011_00101  // put 2 1 # $r1 = 2 
1000_01001  // lb $r1 1 # $r1 = M[2] 
0000_00010  // add $r0 $r1 0 # $r0 = $r0 + $r1 
1011_00001  // put 0 1 # $r1 = 0 
1100_11010  // mov $r3 $r1 # $r3 = $r1 
1011_01011  // put 5 1 # $r1 = 5 
1010_00111  // bne $r0 $r3 1 # if($r0 == 0) return 0 else move to just past halt 
1011_01011  // put 5 1 
1001_01000  // sb $r1 0 # update mem locations 5 & 6 with 0 and halt 
1011_01101  // put 6 1 
1001_01000  // sb $r1 0 
1101_00000  // halt 
1011_00010  // put 1 0 # $r0 = 1        # retrieve the MSB from mem and store 
1000_00000  // lb $r0 0 # $r0 = M[1]    
1011_01111  // put 7 1 # $r1 = 7 
0111_00010  // srl $r0 $r1 0 # $r0 = $r0 >> 7 
1001_01000  // sb $r1 0 # M[7] = signbit (1 or 0) 
1011_11100  // put 14 0 # $r0 = 14   # set Exp to 29 and store 
1011_00011  // put 1 1 # $r1 = 1 
0110_00010  // sll $r0 $r1 0 # $r0 = $r0 << 1 
0000_00010  // add $r0 $r1 0 # $r0 = $r0 + 1 
1011_10001  // put 8 1 # $r1 = 8 
1001_01000  // sb $r1 0 # M[8] = exp = 29 
1011_00010  // put 1 0 #copy man 1 and 2 to mem 9 and 10 
1000_00000  // lb $r0 0 
1011_10011  // put 9 1 
1001_01000  // sb $r1 0 
1011_00100  // put 2 0 
1000_00000  // lb $r0 0 
1011_10101  // put 10 1 
1001_01000  // sb $r1 0 
1011_00010  // put 1 0 # $r0 = 1		 
1000_00000  // lb $r0 0 # $r0 = M[1] 
1011_00011  // put 1 1 # $r1 = 1 
0110_00010  // sll $r0 $r1 0 # $r0 = $r0 << 1 
1011_01111  // put 7 1 # $r1 = 7 
0111_00010  // srl $r0 $r1 0 # $r0 = $r0 >> 7 
1100_10000  // mov $r2 $r0 # $r2 = $r0 
1011_00010  // put 1 0 
1011_01011  // put 5 1 
0110_00010  // sll $r0 $r1 0 
1011_00011  // put 1 1 
0000_00010  // add $r0 $r1 0 # $r0 = addr = 33 
1011_00001  // put 0 1 # $r1 = 0 
1010_10010  // bne $r2 $r1 0 # if ($r2 != 0) branch to endLoop (if bit 14 = 1) 
1011_10000  // put 8 0 # $r0 = 8  		# decrement exponent 
1000_00000  // lb $r0 0 # $r0 = M[8] = exp 
1011_00011  // put 1 1 # $r1 = 1 
0010_00010  // sub $r0 $r1 0 # $r0 = $r0 - 1 
1011_10001  // put 8 1 # $r1 = 8 
1001_01000  // sb $r1 0 # M[8] = exp-1 
1011_10010  // put 9 0 #shift entire int << 1 
1000_00000  // lb $r0 0 
1011_10101  // put 10 1 
1000_01001  // lb $r1 1 
0011_00010  // sllrr $r0 $r1 
1100_10010  // mov $r2 $r1 # store shifted value back in mem 9, 10 
1011_10011  // put 9 1 
1100_11010  // mov $r3 $r1 
1100_01100  // mov $r1 $r2 
1001_11001  // sb $r3 1 
1011_10101  // put 10 1 
1001_01000  // sb $r1 0 
1011_00010  // put 1 0 # $r0 = 1		# get addr to jump backwards to loop 
1011_01111  // put 7 1 # $r1 = 7 
0110_00010  // sll $r0 $r1 0 # $r0 = $r0 << 7   # $r0 = negative sign bit 
1011_10111  // put 11 1 # $r1 = 11 
1100_10010  // mov $r2 $r1 # $r2 = $r1 = 11 
1011_00101  // put 2 1 # $r1 = 2 
0110_10011  // sll $r2 $r1 1 # $r1 = $r2 << 2  
1100_10010  // mov $r2 $r1 # $r2 = $r1	 
1011_00111  // put 3 1 # $r1 = 3 
0000_10011  // add $r2 $r1 1 # $r1 = 47 = jump addr 
0000_00010  // add $r0 $r1 0 # $r0 = -47 (because jumping backwards) 
1011_00001  // put 0 1 
1100_10010  // mov $r2 $r1 
1011_00011  // put 1 1 
1010_10010  // bne $r2 $r1 0 # jump to loop 
1011_10100  // put 10 0 # Man0[4] => M[15] 
1000_00000  // lb $r0 0 
1011_00111  // put 3 1 
0110_00010  // sll $r0 $r1 0 
1011_01111  // put 7 1 
0111_00010  // srl $r0 $r1 0 
1011_11111  // put 15 1 
1001_01000  // sb $r1 0 
1011_10100  // put 10 0 # R[3] => M[14] 
1000_00000  // lb $r0 0 
1011_01001  // put 4 1 
0110_00010  // sll $r0 $r1 0 
1011_01111  // put 7 1 
0111_00010  // srl $r0 $r1 0 
1011_11101  // put 14 1 
1001_01000  // sb $r1 0 
1011_10100  // put 10 0 # S[2] => M[13] 
1000_00000  // lb $r0 0 
1011_01011  // put 5 1 
0110_00010  // sll $r0 $r1 0 
1011_01111  // put 7 1 
0111_00010  // srl $r0 $r1 0 
1011_11011  // put 13 1 
1001_01000  // sb $r1 0 
1011_10100  // put 10 0 # S[1] => M[12] 
1000_00000  // lb $r0 0 
1011_01101  // put 6 1 
0110_00010  // sll $r0 $r1 0 
1011_01111  // put 7 1 
0111_00010  // srl $r0 $r1 0 
1011_11001  // put 12 1 
1001_01000  // sb $r1 0 
1011_10100  // put 10 0 # S[0] 
1000_00000  // lb $r0 0 
1011_01111  // put 7 1 
0110_00010  // sll $r0 $r1 0 
1011_01111  // put 7 1 
0111_00010  // srl $r0 $r1 0 
1100_10000  // mov $r2 $r0 # $r2 = $r0 = S[0] 
1011_11001  // put 12 1 
1000_01000  // lb $r1 0 # $r0 = S[1] 
0100_00100  // or $r0 $r2 0 
1011_11011  // put 13 1 
1000_01001  // lb $r1 1 # $r1 = S[2] 
0100_00010  // or $r0 $r1 0 
1011_10111  // put 11 1 
1001_01000  // sb $r1 0 # OR(S[0-2]) => M[11] 
1011_10010  // put 9 0 # shift man << 2 
1000_00000  // lb $r0 0 
1011_10101  // put 10 1 
1000_01001  // lb $r1 1 
0011_00010  // sllrr $r0 $r1 
0011_00010  // sllrr $r0 $r1 
1110_00010  // srlrr $r0 $r1 # shift man >> 6 
1110_00010  // srlrr $r0 $r1 
1110_00010  // srlrr $r0 $r1 
1110_00010  // srlrr $r0 $r1 
1110_00010  // srlrr $r0 $r1 
1110_00010  // srlrr $r0 $r1 
1100_10010  // mov $r2 $r1 # store shifted value back in mem 9, 10 
1011_10011  // put 9 1 
1100_11010  // mov $r3 $r1 
1100_01100  // mov $r1 $r2 
1001_11001  // sb $r3 1 
1011_10101  // put 10 1 
1001_01000  // sb $r1 0 
1011_11111  // put 15 1 
1000_01000  // lb $r1 0 # $r0 = M[15] = Man0 
1100_10000  // mov $r2 $r0 # $r2 = Man0 
1011_11000  // put 12 0 
1011_00011  // put 1 1 
0110_00010  // sll $r0 $r1 0 
0000_00010  // add $r0 $r1 0 # $r0 = addr = 25 
1011_00001  // put 0 1 
1010_10010  // bne $r2 $r1 0 # if Man0 != 0, goto else 
1011_11101  // put 14 1 
1000_01000  // lb $r1 0 # $r0 = M[14] = R		 
1100_10000  // mov $r2 $r0 # $r2 = R 
1011_10000  // put 8 0 
1011_00111  // put 3 1 
0110_00010  // sll $r0 $r1 0 
1011_01011  // put 5 1 
0000_00010  // add $r0 $r1 0 # $r0 = addr = 69 
1011_00011  // put 1 1 
1010_10010  // bne $r2 $r1 0 # if R != 1, finish 
1011_10111  // put 11 1 
1000_01000  // lb $r1 0 # $r0 = M[11] = S 
1100_10000  // mov $r2 $r0 # $r2 = S 
1011_11100  // put 14 0 
1011_00101  // put 2 1 
0110_00010  // sll $r0 $r1 0 
1011_00111  // put 3 1 
0000_00010  // add $r0 $r1 0 # $r0 = addr = 59 
1011_00011  // put 1 1 
1010_10010  // bne $r2 $r1 0 # if S != 1, finish 
1011_00001  // put 0 1 # $r1 = 0 
1100_10010  // mov $r2 $r1 # $r2 = $r1 (= 0) 
1011_10011  // put 9 1 # $r1 = addr = 9 
1011_00010  // put 1 0 # $r0 = 1 
1010_00101  // bne $r0 $r2 1 # jump to rounding 
1011_11101  // put 14 1 
1000_01000  // lb $r1 0 # $r0 = M[14] = R		 
1100_10000  // mov $r2 $r0 # $r2 = $r0 
1011_10110  // put 11 0 
1011_00101  // put 2 1 
0110_00010  // sll $r0 $r1 0 
1011_00011  // put 1 1 
0000_00010  // add $r0 $r1 0 # $r0 = addr = 45 
1010_10010  // bne $r2 $r1 0 # if R != 1, finish 
1011_10100  // put 10 0 
1000_00000  // lb $r0 0 
1011_00011  // put 1 1 
0000_00011  // add $r0 $r1 1 # $r1 = Man0 + 1 
1100_10010  // mov $r2 $r1 # $r2 = $r1 
1011_00011  // put 1 1 
1111_00011  // addo $r0 $r1 1 
1100_11010  // mov $r3 $r1 # $r3 = $r1 = ovf value 
1011_10100  // put 10 0 
1100_01100  // mov $r1 $r2 
1001_00001  // sb $r0 1 
1011_11110  // put 15 0 
1011_00011  // put 1 1 
0110_00010  // sll $r0 $r1 0 # $r0 = addr = 30 
1010_11010  // bne $r3 $r1 0 # if ovf != 1, finish 
1011_10011  // put 9 1 
1000_01000  // lb $r1 0 
1011_01001  // put 4 1 
0100_00010  // or $r0 $r1 0 
1011_00011  // put 1 1 
0000_00010  // add $r0 $r1 0 
1100_11000  // mov $r3 $r0 
1011_10001  // put 8 1 
0101_00011  // and $r0 $r1 1 
1100_10010  // mov $r2 $r1 
1011_10001  // put 8 1 
1011_11010  // put 13 0 
1010_10010  // bne $r2 $r1 0 # if no ovf, no_ovf 
1011_10101  // put 10 1 
1000_01001  // lb $r1 1 
1100_00110  // mov $r0 $r3 
1110_00010  // srlrr $r0 $r1 # shift man right by 1 bit 
1100_11000  // mov $r3 $r0 
1011_10100  // put 10 0 
1001_00001  // sb $r0 1 # M[10] = shifted Man part 2 
1011_10000  // put 8 0 # $r0 = 8  		 
1000_00000  // lb $r0 0 # $r0 = M[8] = exp 
1011_00011  // put 1 1 # $r1 = 1 
0000_00010  // add $r0 $r1 0 # $r0 = $r0 + 1 # increment exponent 
1011_10001  // put 8 1 # $r1 = 8 
1001_01000  // sb $r1 0 # M[8] = exp+1 
1011_00110  // put 3 0 
0101_11000  // and $r3 $r0 0 # hide hidden bit 
1011_10011  // put 9 1 
1001_01000  // sb $r1 0 # store Man part 1 in M[9] 
1011_01111  // put 7 1 
1000_01000  // lb $r1 0 # $r0 = M[7] = signbit 
0110_00010  // sll $r0 $r1 0 # $r0 = signbit << 7 
1011_10001  // put 8 1 
1000_01001  // lb $r1 1 # $r1 = M[8] = exp	 
1100_10010  // mov $r2 $r1 # $r2 = $r1 = exp 
1011_00101  // put 2 1 
0110_10011  // sll $r2 $r1 1 # $r1 = exp << 2 
0100_00010  // or $r0 $r1 0 # $r0 = OR (signbit , exp) 
1011_10011  // put 9 1 
1000_01001  // lb $r1 1 # $r1 = M[9] = MSW of Man 
0100_00010  // or $r0 $r1 0 # $r0 = OR (signbit, exp, man[8-9]) 
1011_01011  // put 5 1 
1001_01000  // sb $r1 0 # M[5] = $r0  
1011_10101  // put 10 1 
1000_01001  // lb $r1 1 # $r1 = M[10] = LSW of Man 
1011_01100  // put 6 0 
1001_00001  // sb $r0 1 # M[6] = $r1 
1101_00000  // halt 
